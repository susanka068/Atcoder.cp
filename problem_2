**Problem 2 (frog 2)**

> question - 
Problem Statement
There are 
N
 stones, numbered 
1
,
2
,
…
,
N
. For each 
i
 (
1
≤
i
≤
N
), the height of Stone 
i
 is 
h
i
.

There is a frog who is initially on Stone 
1
. He will repeat the following action some number of times to reach Stone 
N
:

If the frog is currently on Stone 
i
, jump to one of the following: Stone 
i
+
1
,
i
+
2
,
…
,
i
+
K
. Here, a cost of 
|
h
i
−
h
j
|
 is incurred, where 
j
 is the stone to land on.
Find the minimum possible total cost incurred before the frog reaches Stone 
N
.

Constraints
All values in input are integers.
2
≤
N
≤
10
5
1
≤
K
≤
100
1
≤
h
i
≤
10
4
Input
Input is given from Standard Input in the following format:

N
 
K

h
1
 
h
2
 
…
 
h
N

Output
Print the minimum possible total cost [incurred.](https://atcoder.jp/contests/dp/tasks/dp_b)

`#include<bits/stdc++.h>
using namespace std;
#define NIL -1
#define fio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
/*long int frog1(long int dp[],int h[],long int i)
{
  
  if(i==1)
    dp[i]=abs(h[i+1]-h[i]);
  else
    
  
    return dp[i-1];
}*/
int main()
{
  fio;
  long int n;
  int k;
  cin>>n;
  cin>>k;
  int h[n+1];
  long int dp[n];
  vector<int> v;
  dp[0]=0;
   for(int i=1;i<n;++i)
    dp[i]=NIL;
  for(int i=1;i<=n;++i)
  cin>>h[i];
    for(int i=1;i<n;++i)
    {
      long int min=INT_MAX ;
      for(int j=0;j<k;j++)
      {
        if(i>j and min>(abs(h[i+1]-h[i-j])+dp[i-j-1]))
          min=(abs(h[i+1]-h[i-j])+dp[i-j-1]);
        dp[i]=min;
      }
    }
  //long int k=frog1(dp,h,n);
/*  dp[1]=abs(h[2]-h[1]);
  for(int i=2;i<n;++i)
    dp[i]=min(abs(h[i+1]-h[i])+dp[i-1],abs(h[i+1]-h[i-1])+dp[i-2]);*/
  //for(int i=0;i<n;++i)
  cout<<dp[n-1]<<'\n';
  return 0;
}`
